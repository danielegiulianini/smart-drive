server {
  listen 8082;

  #hiding for not receiving CORS error because of multiple ACAO header set (reverse-proxy and microservices)
  proxy_hide_header Access-Control-Allow-Origin;
  #add_header 'Access-Control-Allow-Origin' '*' always;
  add_header Access-Control-Allow-Origin $http_origin always;

  #no trailing slash to catch both api/v1/users and api/v1/users/
  location /api/v1/users {
      proxy_pass http://users:8083/api/v1/profiles;
  }

  location /api/v1/vehicles {
    proxy_pass http://vehicles:8087/api/v1/vehicles;
  }
  location /api/v1/images {
    proxy_pass http://images:8086/api/v1/images;
  }
  location /api/v1/trips {
    proxy_pass http://trips:8084/api/v1/trips;
  }

  location /api/v1/notifications {
    proxy_pass http://notifications:8088;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }

  #no notification since not exposing HTTP API

  #access_log /var/log/nginx/access.log;
}